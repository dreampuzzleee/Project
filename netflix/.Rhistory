knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
#setwd("/Users/daidai/Desktop/ds_project/netflix")
df <- read.csv("netflix_titles.csv")
head(df, n = 5)
# check dataset size and structure
dim(df)
str(df)
# colMeans() function in R calculates the mean for each column of a matrix or a dataframe
colMeans(df == "") * 100
sum(duplicated(df))
# get first 10 rows with empty values in director
missing_rows <- df[df$director == "", ]
print(head(missing_rows), 10)
# fill empty values in 'director', 'cast' and 'country' features with 'unknown'
df$director <- ifelse(df$director == "", "Unknown", df$director)
print(head(df$director), 10)
df$cast <- ifelse(df$cast == "", "Unknown", df$cast)
print(head(df$cast), 10)
df$country <- ifelse(df$country == "", "Unknown", df$country)
print(head(df$country), 10)
# drop empty value in columns
df <- df[apply(df, 1, function(row) !any(row == "")), ]
colMeans(df == "") * 100
sum(duplicated(df))
# split added date and added year in 'date_added'
date <- strsplit(df$date_added, ", ")
added_date <- sapply(date, function(x) x[1])
added_year <- sapply(date, function(x) x[2])
df$added_month <- added_date
df$added_year <- added_year
# remove 'date_added' column
df <- df[, !(names(df) %in% c("date_added"))]
# drop rows that 'added_year' is less than 'release_year'
df <- df[!(df$added_year < df$release_year), ]
dim(df)
type_counts <- table(df$type)
type_counts
ggplot(df, aes(x = type, fill = type)) +
geom_bar(width = 0.5) +
labs(x = "Type", y = "Count") +
theme_minimal()
movie_percentage <- round((type_counts["Movie"] / sum(type_counts)) * 100, 2)
tv_show_percentage <- round((type_counts["TV Show"] / sum(type_counts)) * 100, 2)
sprintf("On Netflix, %.2f%% are Movie and %.2f%% are TV show", movie_percentage, tv_show_percentage)
director_counts <- sort(table(df$director), decreasing = TRUE)
director_counts[1:10]
country_counts <- sort(table(df$country), decreasing = TRUE)
top_countries <- as.data.frame(country_counts[1:5])
ggplot(top_countries, aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
labs(x = "Country", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(df)
date_counts <- sort(table(df$added_year), decreasing = TRUE)
date_counts <- sort(table(df$added_year), decreasing = TRUE)
date_df <- as.data.frame(date_counts[1:5])
ggplot(date_df, aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
labs(x = "Year", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
date_counts <- sort(table(df$added_year), decreasing = TRUE)
date_df <- as.data.frame(date_counts)
ggplot(date_df, aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
labs(x = "Year", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
date_counts <- sort(table(df$added_year))
date_df <- as.data.frame(date_counts)
ggplot(date_df, aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
labs(x = "Year", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
date_counts <- sort(table(df$added_year), decreasing = TRUE)
date_df <- as.data.frame(date_counts)
ggplot(date_df, aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
labs(x = "Year", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
date_counts <- sort(table(df$added_year))
date_df <- as.data.frame(date_counts)
ggplot(date_df, aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
labs(x = "Year", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
date_counts
View(date_df)
date_counts <- sort(table(df$added_year))
date_df <- data.frame(Year = as.integer(names(year_counts)), Count = as.integer(year_counts))
date_counts <- sort(table(df$added_year))
date_df <- data.frame(Year = as.integer(names(date_counts)), Count = as.integer(date_counts))
ggplot(date_df, aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
labs(x = "Year", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(df)
View(date_df)
date_counts <- sort(table(df$added_year))
date_df <- data.frame(Year = as.integer(names(date_counts)), Count = as.integer(date_counts))
ggplot(date_df, aes(x = Year, y = Count, fill = Var1)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
date_counts <- sort(table(df$added_year))
date_df <- data.frame(Year = as.integer(names(date_counts)), Count = as.integer(date_counts))
ggplot(date_df, aes(x = Year, y = Count, fill = Year)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
date_counts <- sort(table(df$added_year))
date_df <- data.frame(Year = as.integer(names(date_counts)), Count = as.integer(date_counts))
ggplot(date_df, aes(x = Year, y = Count) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(date_df)
date_counts <- sort(table(df$added_year))
date_df <- data.frame(Year = as.integer(names(date_counts)), Count = as.integer(date_counts))
date_df <- date_df[order(date_df$Year), , drop = FALSE]
ggplot(date_df, aes(x = Year, y = Count) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(date_df)
date_counts <- sort(table(df$added_year))
date_df <- data.frame(Year = as.integer(names(date_counts)), Count = as.integer(date_counts))
date_df$Year <- as.factor(date_df$Year)
ggplot(date_df, aes(x = Year, y = Count) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
date_counts <- sort(table(df$added_year))
date_df <- data.frame(Year = as.integer(names(date_counts)), Count = as.integer(date_counts))
date_df$Year <- as.factor(date_df$Year)
ggplot(date_df, aes(x = Year, y = Count, fill = Year) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
date_counts <- sort(table(df$added_year))
date_df <- data.frame(Year = as.integer(names(date_counts)), Count = as.integer(date_counts))
date_df$Year <- as.factor(date_df$Year)
ggplot(date_df, aes(x = Year, y = Count, fill = Year)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
#setwd("/Users/daidai/Desktop/ds_project/netflix")
df <- read.csv("netflix_titles.csv")
head(df, n = 5)
# check dataset size and structure
dim(df)
str(df)
# colMeans() function in R calculates the mean for each column of a matrix or a dataframe
colMeans(df == "") * 100
sum(duplicated(df))
# get first 10 rows with empty values in director
missing_rows <- df[df$director == "", ]
print(head(missing_rows), 10)
# fill empty values in 'director', 'cast' and 'country' features with 'unknown'
df$director <- ifelse(df$director == "", "Unknown", df$director)
print(head(df$director), 10)
df$cast <- ifelse(df$cast == "", "Unknown", df$cast)
print(head(df$cast), 10)
df$country <- ifelse(df$country == "", "Unknown", df$country)
print(head(df$country), 10)
# drop empty value in columns
df <- df[apply(df, 1, function(row) !any(row == "")), ]
colMeans(df == "") * 100
sum(duplicated(df))
# split added date and added year in 'date_added'
date <- strsplit(df$date_added, ", ")
added_date <- sapply(date, function(x) x[1])
added_year <- sapply(date, function(x) x[2])
df$added_month <- added_date
df$added_year <- added_year
# remove 'date_added' column
df <- df[, !(names(df) %in% c("date_added"))]
# drop rows that 'added_year' is less than 'release_year'
df <- df[!(df$added_year < df$release_year), ]
dim(df)
type_counts <- table(df$type)
type_counts
ggplot(df, aes(x = type, fill = type)) +
geom_bar(width = 0.5) +
labs(x = "Type", y = "Count") +
theme_minimal()
movie_percentage <- round((type_counts["Movie"] / sum(type_counts)) * 100, 2)
tv_show_percentage <- round((type_counts["TV Show"] / sum(type_counts)) * 100, 2)
sprintf("On Netflix, %.2f%% are Movie and %.2f%% are TV show", movie_percentage, tv_show_percentage)
director_counts <- sort(table(df$director), decreasing = TRUE)
director_counts[1:10]
country_counts <- sort(table(df$country), decreasing = TRUE)
top_countries <- as.data.frame(country_counts[1:5])
ggplot(top_countries, aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
labs(x = "Country", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
date_counts <- sort(table(df$added_year))
date_df <- data.frame(Year = as.integer(names(date_counts)), Count = as.integer(date_counts))
date_df$Year <- as.factor(date_df$Year)
ggplot(date_df, aes(x = Year, y = Count, fill = Year)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(df)
# split added date and added year in 'date_added'
date <- strsplit(df$date_added, ", ")
library(ggplot2)
#setwd("/Users/daidai/Desktop/ds_project/netflix")
df <- read.csv("netflix_titles.csv")
head(df, n = 5)
# check dataset size and structure
dim(df)
str(df)
# colMeans() function in R calculates the mean for each column of a matrix or a dataframe
colMeans(df == "") * 100
sum(duplicated(df))
# get first 10 rows with empty values in director
missing_rows <- df[df$director == "", ]
print(head(missing_rows), 10)
# fill empty values in 'director', 'cast' and 'country' features with 'unknown'
df$director <- ifelse(df$director == "", "Unknown", df$director)
print(head(df$director), 10)
df$cast <- ifelse(df$cast == "", "Unknown", df$cast)
print(head(df$cast), 10)
df$country <- ifelse(df$country == "", "Unknown", df$country)
print(head(df$country), 10)
# drop empty value in columns
df <- df[apply(df, 1, function(row) !any(row == "")), ]
colMeans(df == "") * 100
sum(duplicated(df))
# split added date and added year in 'date_added'
date <- strsplit(df$date_added, ", ")
added_date <- sapply(date, function(x) x[1])
added_year <- sapply(date, function(x) x[2])
df$added_month <- added_date
df$added_year <- added_year
# remove 'date_added' column
df <- df[, !(names(df) %in% c("date_added"))]
prop.table(table(df$rating))
prop.table(table(df$rating))
ggplot(df, aes(x = rating)) +
geom_bar() +
coord_flip() +
labs(y = "Count", x = "Rating") +
theme_minimal()
prop.table(table(df$rating))
ggplot(df, aes(x = rating, fill = rating)) +
geom_bar() +
coord_flip() +
labs(y = "Count", x = "Rating") +
theme_minimal()
sort(prop.table(table(df$rating)))
ggplot(df, aes(x = rating, fill = rating)) +
geom_bar() +
coord_flip() +
labs(y = "Count", x = "Rating") +
theme_minimal()
sort(prop.table(table(df$rating)), decreasing = TRUE)
ggplot(df, aes(x = rating, fill = rating)) +
geom_bar() +
coord_flip() +
labs(y = "Count", x = "Rating") +
theme_minimal()
View(top_countries)
View(top_countries)
df$country <- factor(df$country, levels = top_countries$Var1)
ggplot(df, aes(x = country, fill = type)) +
geom_bar(position = "dodge") +
labs(x = "Country", y = "Count", fill = "Type") +
theme_minimal()
top_five <- top_countries$Var1[-1]
df$country <- factor(df$country, levels = top_five)
ggplot(df, aes(x = country, fill = type)) +
geom_bar(position = "dodge") +
labs(x = "Country", y = "Count", fill = "Type") +
theme_minimal()
top_five <- top_countries$Var1[-6]
df$country <- factor(df$country, levels = top_five)
ggplot(df, aes(x = country, fill = type)) +
geom_bar(position = "dodge") +
labs(x = "Country", y = "Count", fill = "Type") +
theme_minimal()
top_countries$Var1[-6]
top_countries$Var1
View(top_countries)
top_five <- top_countries$Var1
df$country <- factor(df$country, levels = top_five)
ggplot(df, aes(x = country, fill = type)) +
geom_bar(position = "dodge") +
labs(x = "Country", y = "Count", fill = "Type") +
theme_minimal()
country_counts <- sort(table(df$country), decreasing = TRUE)
top_countries <- as.data.frame(country_counts[1:5])
ggplot(top_countries, aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
labs(x = "Country", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#setwd("/Users/daidai/Desktop/ds_project/netflix")
df <- read.csv("netflix_titles.csv")
head(df, n = 5)
# check dataset size and structure
dim(df)
str(df)
# colMeans() function in R calculates the mean for each column of a matrix or a dataframe
colMeans(df == "") * 100
sum(duplicated(df))
# get first 10 rows with empty values in director
missing_rows <- df[df$director == "", ]
print(head(missing_rows), 10)
# fill empty values in 'director', 'cast' and 'country' features with 'unknown'
df$director <- ifelse(df$director == "", "Unknown", df$director)
print(head(df$director), 10)
df$cast <- ifelse(df$cast == "", "Unknown", df$cast)
print(head(df$cast), 10)
df$country <- ifelse(df$country == "", "Unknown", df$country)
print(head(df$country), 10)
# drop empty value in columns
df <- df[apply(df, 1, function(row) !any(row == "")), ]
colMeans(df == "") * 100
sum(duplicated(df))
# split added date and added year in 'date_added'
date <- strsplit(df$date_added, ", ")
added_date <- sapply(date, function(x) x[1])
added_year <- sapply(date, function(x) x[2])
df$added_month <- added_date
df$added_year <- added_year
# remove 'date_added' column
df <- df[, !(names(df) %in% c("date_added"))]
# drop rows that 'added_year' is less than 'release_year'
df <- df[!(df$added_year < df$release_year), ]
dim(df)
type_counts <- table(df$type)
type_counts
ggplot(df, aes(x = type, fill = type)) +
geom_bar(width = 0.5) +
labs(x = "Type", y = "Count") +
theme_minimal()
movie_percentage <- round((type_counts["Movie"] / sum(type_counts)) * 100, 2)
tv_show_percentage <- round((type_counts["TV Show"] / sum(type_counts)) * 100, 2)
sprintf("On Netflix, %.2f%% are Movie and %.2f%% are TV show", movie_percentage, tv_show_percentage)
director_counts <- sort(table(df$director), decreasing = TRUE)
director_counts[1:10]
country_counts <- sort(table(df$country), decreasing = TRUE)
top_countries <- as.data.frame(country_counts[1:5])
ggplot(top_countries, aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
labs(x = "Country", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
date_counts <- sort(table(df$added_year))
date_df <- data.frame(Year = as.integer(names(date_counts)), Count = as.integer(date_counts))
date_df$Year <- as.factor(date_df$Year)
ggplot(date_df, aes(x = Year, y = Count, fill = Year)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
sort(prop.table(table(df$rating)), decreasing = TRUE)
ggplot(df, aes(x = rating, fill = rating)) +
geom_bar() +
coord_flip() +
labs(y = "Count", x = "Rating") +
theme_minimal()
top_five <- top_countries$Var1
df$country <- factor(df$country, levels = top_five)
ggplot(df, aes(x = country, fill = type)) +
geom_bar(position = "dodge") +
labs(x = "Country", y = "Count", fill = "Type") +
theme_minimal()
top_five
top_five <- top_countries$Var1
df<-df[df$country %in% top_countries, ]
df$country <- factor(df$country, levels = top_five)
ggplot(df, aes(x = country, fill = type)) +
geom_bar(position = "dodge") +
labs(x = "Country", y = "Count", fill = "Type") +
theme_minimal()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
#setwd("/Users/daidai/Desktop/ds_project/netflix")
df <- read.csv("netflix_titles.csv")
head(df, n = 5)
# check dataset size and structure
dim(df)
str(df)
# colMeans() function in R calculates the mean for each column of a matrix or a dataframe
colMeans(df == "") * 100
sum(duplicated(df))
# get first 10 rows with empty values in director
missing_rows <- df[df$director == "", ]
print(head(missing_rows), 10)
# fill empty values in 'director', 'cast' and 'country' features with 'unknown'
df$director <- ifelse(df$director == "", "Unknown", df$director)
print(head(df$director), 10)
df$cast <- ifelse(df$cast == "", "Unknown", df$cast)
print(head(df$cast), 10)
df$country <- ifelse(df$country == "", "Unknown", df$country)
print(head(df$country), 10)
# drop empty value in columns
df <- df[apply(df, 1, function(row) !any(row == "")), ]
colMeans(df == "") * 100
sum(duplicated(df))
# split added date and added year in 'date_added'
date <- strsplit(df$date_added, ", ")
added_date <- sapply(date, function(x) x[1])
added_year <- sapply(date, function(x) x[2])
df$added_month <- added_date
df$added_year <- added_year
# remove 'date_added' column
df <- df[, !(names(df) %in% c("date_added"))]
# drop rows that 'added_year' is less than 'release_year'
df <- df[!(df$added_year < df$release_year), ]
dim(df)
type_counts <- table(df$type)
type_counts
ggplot(df, aes(x = type, fill = type)) +
geom_bar(width = 0.5) +
labs(x = "Type", y = "Count") +
theme_minimal()
movie_percentage <- round((type_counts["Movie"] / sum(type_counts)) * 100, 2)
tv_show_percentage <- round((type_counts["TV Show"] / sum(type_counts)) * 100, 2)
sprintf("On Netflix, %.2f%% are Movie and %.2f%% are TV show", movie_percentage, tv_show_percentage)
director_counts <- sort(table(df$director), decreasing = TRUE)
director_counts[1:10]
country_counts <- sort(table(df$country), decreasing = TRUE)
top_countries <- as.data.frame(country_counts[1:5])
ggplot(top_countries, aes(x = Var1, y = Freq, fill = Var1)) +
geom_bar(stat = "identity") +
labs(x = "Country", y = "Count") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
date_counts <- sort(table(df$added_year))
date_df <- data.frame(Year = as.integer(names(date_counts)), Count = as.integer(date_counts))
date_df$Year <- as.factor(date_df$Year)
ggplot(date_df, aes(x = Year, y = Count, fill = Year)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
sort(prop.table(table(df$rating)), decreasing = TRUE)
ggplot(df, aes(x = rating, fill = rating)) +
geom_bar() +
coord_flip() +
labs(y = "Count", x = "Rating") +
theme_minimal()
top_five <- top_countries$Var1
df<-df[df$country %in% top_five, ]
df$country <- factor(df$country, levels = top_five)
ggplot(df, aes(x = country, fill = type)) +
geom_bar(position = "dodge") +
labs(x = "Country", y = "Count", fill = "Type") +
theme_minimal()
